rule "nodeReqlcddisplaytime_rule"
when
        Item nodeReqlcddisplaytime received command
then
		logInfo("rules","forward to nodeSndlcddisplaytime")
        //nodeSndlcddisplaytime.sendCommand( new DecimalType(now.millis/1000) )
        nodeSndlcddisplaytime.sendCommand( new DecimalType(now.minusHours(8).millis/1000) )
        //nodeSndlcddisplaytime.sendCommand( new DecimalType(((new DateTimeType()) as DateTimeType).calendar.timeInMillis / 1000) )
end

rule "sensorLoveLastCom_rule"
when
        Item nodeReqLove01 received command
or
        Item nodeReqLoveSleep received command
then
        sensorLoveLastCom.postUpdate( new DateTimeType() )
end

rule "nodeReqLove01_rule"
when
	Item nodeReqLove01 received command
then
	if(global_love_switch.state == ON) {
		logInfo("rules","forward to nodeReqLove01")
		relayLove01.sendCommand(receivedCommand)
		global_love_switch.postUpdate(OFF)
	}
end

rule "nodeReqLoveSleep_rule"
when
	Item nodeReqLoveSleep received command
then
	logInfo("rules","forward to relayLoveSleep")
	//relayLoveSleep.sendCommand(new DecimalType(300000))
	relayLoveSleep.sendCommand(new DecimalType(60000))
end

rule "nodeReqlcdtop_rule"
when
	Item nodeReqlcdtop received command or
	Item nodelcdtop received command
then
	logInfo("rules","forward to nodeSndlcdtop")

	if(nodelcdtop.state == NULL) {
		logInfo("rules","setting default for nodelcdtop")
		nodelcdtop.postUpdate(new StringType("OpenHab"))
		Thread::sleep(200)
	}

	logInfo("rules","Sending top: " + nodelcdtop.state.toString)
	nodeSndlcdtop.sendCommand(nodelcdtop.state.toString)
end

rule "nodeReqlcdbottom_rule"
when
	Item nodeReqlcdbottom received command or
	Item nodelcdbottom received command
then
	logInfo("rules","forward to nodeSndlcdbottom")

	if(nodelcdbottom.state == NULL) {
		logInfo("rules","setting default for nodelcdbottom")
		nodelcdbottom.postUpdate(new StringType("OpenHab Connect"))
		Thread::sleep(200)
	}

	logInfo("rules","Sending bottom: " + nodelcdbottom.state.toString)
	nodeSndlcdbottom.sendCommand(nodelcdbottom.state.toString)
end

rule "nodeReqlcdbright_rule"
when
	Item nodeReqlcdbright received command or
	Item nodelcdbright received command
then
	logInfo("rules","forward to nodeSndlcdbright")

	if(nodelcdbright.state == NULL) {
		logInfo("rules","setting default for nodelcdbright")
		nodelcdbright.postUpdate(new DecimalType(0))
		Thread::sleep(200)
	}
	nodeSndlcdbright.sendCommand(nodelcdbright.state as DecimalType)
end
