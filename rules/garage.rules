var Timer timerGL = null
var Timer timerLL = null
var Number raceCheck = 0

rule "sensorGarageLastCom_rule"
when
        Item bayDoorGarage01 received update
or
        Item doorGarage01 received update
or
        Item tempGarage01 received update
or
        Item humGarage01 received update
then
        sensorGarageLastCom.postUpdate( new DateTimeType() )
end

rule "garageTempAlarm"
when
        Item tempGarage01 changed
then
        if(tempGarage01.state < 45) {
                sendPushoverMessage(pushoverBuilder("Garage Temperature Low: " + tempGarage01.state).withPriority(0))
                var String timestr = CurrentTime.state.format("%1$tR")
                nodelcdtop.sendCommand(timestr)
                nodelcdbottom.sendCommand("GTemp Low: " + tempGarage01.state)
                nodelcdbright.sendCommand(100)
        }
end

rule "autoGarageLightOnBayDoor"
when
        Item bayDoorGarage01 changed to 1 
or
	Item zwave_node4_MotionSensor_BinarySensor changed to ON
then
        raceCheck = 1

        if(timerGL !== null && !timerGL.isRunning() && !timerGL.hasTerminated() && zwave_node3_garagelight_switch.state == ON) {
                logInfo("garage", "Garage light reschedule")
                timerGL.reschedule(now.plusMinutes(2))
        }
        else if(zwave_node3_garagelight_switch.state == OFF) {
                if(timerGL !== null){
                        timerGL.cancel
                        timerGL = null
                }
                timerGL = createTimer(now.plusMinutes(2)) [|
                        zwave_node3_garagelight_switch.sendCommand(OFF)
                ]
                zwave_node3_garagelight_switch.sendCommand(ON)
        }

        if(timerLL !== null && !timerLL.isRunning() && !timerLL.hasTerminated() && zwave_node3_garagelight_switch.state == ON) {
                logInfo("laundry room", "Laundry room light reschedule")
                timerLL.reschedule(now.plusMinutes(2))
        }
        if(zwave_node5_laundryroomlight_switch.state == OFF) {
                if(timerLL !== null){
                        timerLL.cancel
                        timerLL = null
                }
                timerLL = createTimer(now.plusMinutes(2)) [|
                        zwave_node5_laundryroomlight_switch.sendCommand(OFF)
                ]
                zwave_node5_laundryroomlight_switch.sendCommand(ON)
        }
        Thread::sleep(2000)
        raceCheck = 0
end

rule "zwave_node3_garagelight_switch_rule"
when
        Item zwave_node3_garagelight_switch changed
then
        logInfo("garage", "Garage light state: " + zwave_node3_garagelight_switch.state)
        if(timerGL !== null && raceCheck == 0){
                logInfo("garage", "Cancel timerGL")
                timerGL.cancel
                timerGL = null
        }
end

rule "zwave_node5_laundryroomlight_switch_rule"
when
        Item zwave_node5_laundryroomlight_switch changed
then
        logInfo("laundry room", "Laundry light state: " + zwave_node5_laundryroomlight_switch.state)
        //Can check isRunning on timer to see if this is triggered by timer.
        //But there doesn't seem to be a need
        if(timerLL !== null && raceCheck == 0){
                logInfo("laundry room", "Cancel timerLL")
                timerLL.cancel
                timerLL = null
        }
end

