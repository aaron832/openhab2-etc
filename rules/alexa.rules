var Timer timer = null
rule "alexa_media_center_power_rule"
when
        Item alexa_media_center_power received command
then
	if(receivedCommand == ON && meidacenter_status.state == OFF && (timer == null || timer.has terminated)) {
		mediacenter_wol.sendCommand(ON)
		logInfo("rule", "delay timer for alexa_media_center_power started")
		timer = createTimer(now.plusSeconds(6)) [|
			logInfo("rule", "delay timer for alexa_media_center_power running")
			if(samsungtv_lr_power_interface.state != ON) {
				samsungtv_lr_power_interface.sendCommand(ON)
			}
		]	
	}
	else {
		if(samsungtv_lr_power_interface.state != receivedCommand) {
			sendCommand(samsungtv_lr_power_interface, receivedCommand)
		}
	}

	if(yamahareceiver_power.state != receivedCommand) {
		sendCommand(yamahareceiver_power, receivedCommand)
	}
end

rule "alexa_media_center_power_update_rule"
when
        Item samsungtv_lr_power_interface changed or
        Item yamahareceiver_power changed
then
        if(samsungtv_lr_power_interface.state==ON && yamahareceiver_power.state==ON) {
                postUpdate(alexa_media_center_power, ON);
        }
        else if(samsungtv_lr_power_interface.state==OFF && yamahareceiver_power.state==OFF) {
                postUpdate(alexa_media_center_power, OFF);
        }
        else {
                 postUpdate(alexa_media_center_power, ON);
        }
end

rule "alexa_execute_test_rule"
when
	Item alexa_execute_test received command
then
	val myString = "salt,"
	myString += "pepper"
	postUpdate(alexaresp, myString)
end
